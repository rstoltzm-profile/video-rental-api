definitions:
  customer.AddressInput:
    properties:
      address:
        maxLength: 100
        minLength: 1
        type: string
      address2:
        maxLength: 100
        type: string
      city_name:
        maxLength: 50
        minLength: 1
        type: string
      district:
        maxLength: 50
        minLength: 1
        type: string
      phone:
        type: string
      postal_code:
        maxLength: 6
        minLength: 4
        type: string
    required:
    - address
    - city_name
    - district
    - phone
    - postal_code
    type: object
  customer.CreateCustomerRequest:
    properties:
      address:
        $ref: '#/definitions/customer.AddressInput'
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      store_id:
        type: integer
    required:
    - address
    - email
    - first_name
    - last_name
    - store_id
    type: object
  customer.Customer:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  film.Film:
    properties:
      description:
        type: string
      language:
        type: string
      rating:
        type: string
      release_year:
        type: integer
      title:
        type: string
    type: object
  film.FilmWithActorsCategories:
    properties:
      actors:
        items:
          type: string
        type: array
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      language:
        type: string
      rating:
        type: string
      release_year:
        type: integer
      title:
        type: string
    type: object
  inventory.Inventory:
    properties:
      address_id:
        type: integer
      film_id:
        type: integer
      inventory_id:
        type: integer
      last_update:
        type: string
      phone:
        type: string
      store_id:
        type: integer
      title:
        type: string
    type: object
  inventory.InventoryAvailability:
    properties:
      available:
        type: boolean
      film_id:
        type: integer
      inventory_id:
        type: integer
      store_id:
        type: integer
      title:
        type: string
    type: object
  payment.Payment:
    properties:
      amount:
        type: number
      customer_id:
        type: integer
      rental_id:
        type: integer
      staff_id:
        type: integer
    required:
    - amount
    - customer_id
    - rental_id
    - staff_id
    type: object
  rental.CreateRentalRequest:
    properties:
      customer_id:
        minimum: 0
        type: integer
      inventory_id:
        minimum: 0
        type: integer
      staff_id:
        minimum: 0
        type: integer
    type: object
  rental.Rental:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      rental_date:
        type: string
      title:
        type: string
    type: object
  store.StoreInventorySummary:
    properties:
      store_id:
        type: integer
      title:
        type: string
      title_count:
        type: integer
    type: object
info:
  contact: {}
paths:
  /films:
    get:
      description: Returns a list of all films
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/film.Film'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List all films
      tags:
      - films
  /films/{id}:
    get:
      description: Returns a single film by its ID
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/film.Film'
        "400":
          description: Invalid film ID
          schema:
            type: string
        "404":
          description: Film not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a film by ID
      tags:
      - films
  /films/{id}/with-actors-categories:
    get:
      description: Returns a film along with its actors and categories
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/film.FilmWithActorsCategories'
        "400":
          description: Invalid film ID
          schema:
            type: string
        "404":
          description: Film not found
          schema:
            type: string
      summary: Get film with actors and categories by ID
      tags:
      - films
  /films/search:
    get:
      description: Returns a list of films matching the title query parameter
      parameters:
      - description: Film title to search for
        in: query
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/film.Film'
            type: array
        "400":
          description: Missing title query parameter
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Search films by title
      tags:
      - films
  /inventory:
    get:
      description: Retrieve inventory items. Optionally filter by store_id query param.
      parameters:
      - description: Store ID to filter inventory
        in: query
        name: store_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/inventory.Inventory'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get inventory
      tags:
      - inventory
  /inventory/available:
    get:
      description: Check if a specific film is available in a given store
      parameters:
      - description: Store ID
        in: query
        name: store_id
        required: true
        type: integer
      - description: Film ID
        in: query
        name: film_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inventory.InventoryAvailability'
        "404":
          description: Not Found, available=false
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Check inventory availability
      tags:
      - inventory
  /stores/{id}/inventory/summary:
    get:
      description: Returns a summary count of inventory for a given store ID
      parameters:
      - description: Store ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.StoreInventorySummary'
            type: array
        "400":
          description: Invalid store ID
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get store inventory summary
      tags:
      - stores
  /v1/customers:
    get:
      description: get all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/customer.Customer'
            type: array
      security:
      - ApiKeyAuth: []
      summary: List customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer
      parameters:
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/customer.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/customer.Customer'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to create customer
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create customer
      tags:
      - customers
  /v1/customers/{id}:
    delete:
      description: Delete a customer by their ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Invalid customer ID
          schema:
            type: string
        "500":
          description: Failed to delete customer
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete customer
      tags:
      - customers
    get:
      description: Get a customer by their ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
        "400":
          description: Invalid customer ID
          schema:
            type: string
        "404":
          description: Customer not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get customer by ID
      tags:
      - customers
  /v1/customers/{id}/rentals:
    get:
      description: Get Customer Rentals By ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
        "400":
          description: Invalid customer ID
          schema:
            type: string
        "404":
          description: Customer not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Customer Rentals
      tags:
      - customers
  /v1/payments:
    post:
      consumes:
      - application/json
      description: Creates a new payment record
      parameters:
      - description: Payment data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/payment.Payment'
      produces:
      - application/json
      responses:
        "201":
          description: Payment ID
          schema:
            type: integer
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to make payment
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Make a payment
      tags:
      - payments
  /v1/rentals:
    get:
      consumes:
      - application/json
      description: Get all rentals or only late rentals based on query param
      parameters:
      - description: Filter late rentals (true)
        in: query
        name: late
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rental.Rental'
            type: array
        "500":
          description: Failed to fetch rentals
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: List rentals
      tags:
      - rentals
    post:
      consumes:
      - application/json
      description: Create a new rental record
      parameters:
      - description: Rental request
        in: body
        name: rental
        required: true
        schema:
          $ref: '#/definitions/rental.CreateRentalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created rental ID
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to create rental
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a rental
      tags:
      - rentals
  /v1/rentals/{id}/return:
    put:
      consumes:
      - application/json
      description: Mark a rental as returned by ID
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Rental returned successfully
          schema:
            type: string
        "400":
          description: Invalid rental ID
          schema:
            type: string
        "500":
          description: Failed to return rental
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Return rental
      tags:
      - rentals
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
swagger: "2.0"
