// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/films": {
            "get": {
                "description": "Returns a list of all films",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "List all films",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/film.Film"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/films/search": {
            "get": {
                "description": "Returns a list of films matching the title query parameter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Search films by title",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Film title to search for",
                        "name": "title",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/film.Film"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing title query parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/films/{id}": {
            "get": {
                "description": "Returns a single film by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Get a film by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/film.Film"
                        }
                    },
                    "400": {
                        "description": "Invalid film ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Film not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/films/{id}/with-actors-categories": {
            "get": {
                "description": "Returns a film along with its actors and categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "films"
                ],
                "summary": "Get film with actors and categories by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/film.FilmWithActorsCategories"
                        }
                    },
                    "400": {
                        "description": "Invalid film ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Film not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inventory": {
            "get": {
                "description": "Retrieve inventory items. Optionally filter by store_id query param.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Get inventory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID to filter inventory",
                        "name": "store_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/inventory.Inventory"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inventory/available": {
            "get": {
                "description": "Check if a specific film is available in a given store",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventory"
                ],
                "summary": "Check inventory availability",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "store_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Film ID",
                        "name": "film_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/inventory.InventoryAvailability"
                        }
                    },
                    "404": {
                        "description": "Not Found, available=false",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stores/{id}/inventory/summary": {
            "get": {
                "description": "Returns a summary count of inventory for a given store ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stores"
                ],
                "summary": "Get store inventory summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.StoreInventorySummary"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid store ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "get all customers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "List customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer.Customer"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create customer",
                "parameters": [
                    {
                        "description": "Customer data",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.CreateCustomerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create customer",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a customer by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get customer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    },
                    "400": {
                        "description": "Invalid customer ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a customer by their ID",
                "tags": [
                    "customers"
                ],
                "summary": "Delete customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid customer ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete customer",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/rentals": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get Customer Rentals By ID",
                "tags": [
                    "customers"
                ],
                "summary": "Get Customer Rentals",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    },
                    "400": {
                        "description": "Invalid customer ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payments": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new payment record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Make a payment",
                "parameters": [
                    {
                        "description": "Payment data",
                        "name": "payment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.Payment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Payment ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to make payment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rentals": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all rentals or only late rentals based on query param",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rentals"
                ],
                "summary": "List rentals",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter late rentals (true)",
                        "name": "late",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rental.Rental"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch rentals",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new rental record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rentals"
                ],
                "summary": "Create a rental",
                "parameters": [
                    {
                        "description": "Rental request",
                        "name": "rental",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rental.CreateRentalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created rental ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create rental",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/rentals/{id}/return": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Mark a rental as returned by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rentals"
                ],
                "summary": "Return rental",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Rental ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rental returned successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid rental ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to return rental",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "customer.AddressInput": {
            "type": "object",
            "required": [
                "address",
                "city_name",
                "district",
                "phone",
                "postal_code"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "address2": {
                    "type": "string",
                    "maxLength": 100
                },
                "city_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "district": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "phone": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 6,
                    "minLength": 4
                }
            }
        },
        "customer.CreateCustomerRequest": {
            "type": "object",
            "required": [
                "address",
                "email",
                "first_name",
                "last_name",
                "store_id"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/customer.AddressInput"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "store_id": {
                    "type": "integer"
                }
            }
        },
        "customer.Customer": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "film.Film": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "rating": {
                    "type": "string"
                },
                "release_year": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "film.FilmWithActorsCategories": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "rating": {
                    "type": "string"
                },
                "release_year": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "inventory.Inventory": {
            "type": "object",
            "properties": {
                "address_id": {
                    "type": "integer"
                },
                "film_id": {
                    "type": "integer"
                },
                "inventory_id": {
                    "type": "integer"
                },
                "last_update": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "store_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "inventory.InventoryAvailability": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "film_id": {
                    "type": "integer"
                },
                "inventory_id": {
                    "type": "integer"
                },
                "store_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "payment.Payment": {
            "type": "object",
            "required": [
                "amount",
                "customer_id",
                "rental_id",
                "staff_id"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "customer_id": {
                    "type": "integer"
                },
                "rental_id": {
                    "type": "integer"
                },
                "staff_id": {
                    "type": "integer"
                }
            }
        },
        "rental.CreateRentalRequest": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "integer",
                    "minimum": 0
                },
                "inventory_id": {
                    "type": "integer",
                    "minimum": 0
                },
                "staff_id": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "rental.Rental": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "rental_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "store.StoreInventorySummary": {
            "type": "object",
            "properties": {
                "store_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "title_count": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
